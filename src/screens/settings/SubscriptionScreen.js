import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image } from 'react-native';
import { COLORS } from '../../constants/colors';
import { DIMENSIONS } from '../../constants/dimensions';
import { SUBSCRIPTION_PLANS } from '../../constants/subscriptionPlans';
import { useSubscription } from '../../context/SubscriptionContext';
import Button from '../../components/common/Button';
import Card from '../../components/common/Card';

const SubscriptionScreen = ({ navigation }) => {
  const { 
    subscription, 
    loading, 
    error, 
    activateTrial, 
    purchaseSubscription, 
    isPremium,
    getTrialDaysLeft
  } = useSubscription();
  
  const [selectedPlan, setSelectedPlan] = useState(SUBSCRIPTION_PLANS.MONTHLY.id);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingError, setProcessingError] = useState(null);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const handleActivateTrial = async () => {
    try {
      setIsProcessing(true);
      setProcessingError(null);
      
      const success = await activateTrial();
      
      if (!success) {
        setProcessingError('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
      }
    } catch (err) {
      console.error('Error activating trial:', err);
      setProcessingError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞');
    } finally {
      setIsProcessing(false);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  const handlePurchaseSubscription = async () => {
    try {
      setIsProcessing(true);
      setProcessingError(null);
      
      const success = await purchaseSubscription(selectedPlan);
      
      if (!success) {
        setProcessingError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
      }
    } catch (err) {
      console.error('Error purchasing subscription:', err);
      setProcessingError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    } finally {
      setIsProcessing(false);
    }
  };
  
  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const renderPlanCard = (plan) => {
    const isSelected = selectedPlan === plan.id;
    const isPlanActive = subscription.plan && subscription.plan.id === plan.id;
    
    return (
      <TouchableOpacity
        key={plan.id}
        style={[
          styles.planCard,
          isSelected && styles.selectedPlanCard,
          isPlanActive && styles.activePlanCard
        ]}
        onPress={() => setSelectedPlan(plan.id)}
        disabled={isPremium() || isProcessing}
      >
        <View style={styles.planHeader}>
          <Text style={styles.planName}>{plan.name}</Text>
          {plan.discount && (
            <View style={styles.discountBadge}>
              <Text style={styles.discountText}>-{plan.discount}%</Text>
            </View>
          )}
        </View>
        
        <View style={styles.planPrice}>
          <Text style={styles.priceAmount}>{plan.price} ‚ÇΩ</Text>
          {plan.period && (
            <Text style={styles.pricePeriod}>
              / {plan.period === 'month' ? '–º–µ—Å—è—Ü' : '–≥–æ–¥'}
            </Text>
          )}
        </View>
        
        <View style={styles.featuresContainer}>
          {plan.features.map((feature, index) => (
            <View key={index} style={styles.featureItem}>
              <Text style={styles.featureText}>‚úì {feature}</Text>
            </View>
          ))}
        </View>
        
        {isPlanActive && (
          <View style={styles.activeBadge}>
            <Text style={styles.activeBadgeText}>–ê–∫—Ç–∏–≤–µ–Ω</Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };
  
  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
      <View style={styles.header}>
        <Text style={styles.title}>–ü–æ–¥–ø–∏—Å–∫–∞</Text>
        <Text style={styles.description}>
          –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        </Text>
      </View>
      
      {isPremium() ? (
        <Card style={styles.statusCard}>
          <Text style={styles.statusTitle}>
            {subscription.status === 'trial' ? '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞'}
          </Text>
          
          {subscription.status === 'trial' && (
            <Text style={styles.statusDescription}>
              –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {getTrialDaysLeft()}
            </Text>
          )}
          
          {subscription.expiryDate && (
            <Text style={styles.statusDescription}>
              –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new Date(subscription.expiryDate).toLocaleDateString('ru-RU')}
            </Text>
          )}
          
          <View style={styles.premiumFeaturesContainer}>
            <Text style={styles.premiumFeaturesTitle}>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</Text>
            {subscription.features.map((feature, index) => (
              <View key={index} style={styles.premiumFeatureItem}>
                <Text style={styles.premiumFeatureText}>‚úì {feature}</Text>
              </View>
            ))}
          </View>
        </Card>
      ) : (
        <>
          <View style={styles.plansContainer}>
            {renderPlanCard(SUBSCRIPTION_PLANS.MONTHLY)}
            {renderPlanCard(SUBSCRIPTION_PLANS.YEARLY)}
          </View>
          
          <View style={styles.actionsContainer}>
            <Button
              title={isProcessing ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}
              onPress={handlePurchaseSubscription}
              disabled={isProcessing}
              style={styles.actionButton}
            />
            
            <Text style={styles.orText}>–∏–ª–∏</Text>
            
            <Button
              title={isProcessing ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ 7 –¥–Ω–µ–π"}
              onPress={handleActivateTrial}
              type="secondary"
              disabled={isProcessing}
              style={styles.actionButton}
            />
          </View>
          
          {processingError && (
            <Text style={styles.errorText}>{processingError}</Text>
          )}
          
          <View style={styles.infoContainer}>
            <Text style={styles.infoTitle}>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É:</Text>
            
            <View style={styles.featureRow}>
              <View style={styles.featureIcon}>
                <Text style={styles.featureIconText}>üé§</Text>
              </View>
              <View style={styles.featureContent}>
                <Text style={styles.featureTitle}>–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤</Text>
                <Text style={styles.featureDescription}>
                  –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥–∏–∫—Ç—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ö–æ–¥–µ, –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
                </Text>
              </View>
            </View>
            
            <View style={styles.featureRow}>
              <View style={styles.featureIcon}>
                <Text style={styles.featureIconText}>üí±</Text>
              </View>
              <View style={styles.featureContent}>
                <Text style={styles.featureTitle}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã</Text>
                <Text style={styles.featureDescription}>
                  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞–ª—é—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–≤–æ–¥–∞
                </Text>
              </View>
            </View>
            
            <View style={styles.featureRow}>
              <View style={styles.featureIcon}>
                <Text style={styles.featureIconText}>üìä</Text>
              </View>
              <View style={styles.featureContent}>
                <Text style={styles.featureTitle}>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</Text>
                <Text style={styles.featureDescription}>
                  –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
                </Text>
              </View>
            </View>
            
            <View style={styles.featureRow}>
              <View style={styles.featureIcon}>
                <Text style={styles.featureIconText}>üîî</Text>
              </View>
              <View style={styles.featureContent}>
                <Text style={styles.featureTitle}>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö</Text>
                <Text style={styles.featureDescription}>
                  –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                </Text>
              </View>
            </View>
          </View>
          
          <Text style={styles.termsText}>
            –û—Ñ–æ—Ä–º–ª—è—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
            –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è, –ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.
          </Text>
        </>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
  },
  contentContainer: {
    padding: DIMENSIONS.SPACING.LARGE,
  },
  header: {
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  title: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_2,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  description: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    color: COLORS.TEXT_SECONDARY,
  },
  statusCard: {
    padding: DIMENSIONS.SPACING.LARGE,
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  statusTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_3,
    fontWeight: 'bold',
    color: COLORS.SUCCESS,
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  statusDescription: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    color: COLORS.TEXT_SECONDARY,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  premiumFeaturesContainer: {
    marginTop: DIMENSIONS.SPACING.MEDIUM,
  },
  premiumFeaturesTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  premiumFeatureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  premiumFeatureText: {
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.TEXT_PRIMARY,
  },
  plansContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  planCard: {
    width: '48%',
    backgroundColor: COLORS.SURFACE,
    borderRadius: DIMENSIONS.RADIUS.LARGE,
    padding: DIMENSIONS.SPACING.MEDIUM,
    shadowColor: COLORS.GRAY_900,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
    position: 'relative',
  },
  selectedPlanCard: {
    borderColor: COLORS.PRIMARY,
    borderWidth: 2,
  },
  activePlanCard: {
    borderColor: COLORS.SUCCESS,
    borderWidth: 2,
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  planName: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
  },
  discountBadge: {
    backgroundColor: COLORS.SUCCESS,
    borderRadius: DIMENSIONS.RADIUS.SMALL,
    paddingHorizontal: DIMENSIONS.SPACING.SMALL,
    paddingVertical: DIMENSIONS.SPACING.TINY,
  },
  discountText: {
    fontSize: DIMENSIONS.FONT_SIZE.SMALL,
    fontWeight: 'bold',
    color: COLORS.TEXT_INVERSE,
  },
  planPrice: {
    flexDirection: 'row',
    alignItems: 'baseline',
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  priceAmount: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_3,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
  },
  pricePeriod: {
    fontSize: DIMENSIONS.FONT_SIZE.SMALL,
    color: COLORS.TEXT_SECONDARY,
    marginLeft: DIMENSIONS.SPACING.TINY,
  },
  featuresContainer: {
    marginTop: DIMENSIONS.SPACING.SMALL,
  },
  featureItem: {
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  featureText: {
    fontSize: DIMENSIONS.FONT_SIZE.SMALL,
    color: COLORS.TEXT_SECONDARY,
  },
  activeBadge: {
    position: 'absolute',
    top: 10,
    right: 10,
    backgroundColor: COLORS.SUCCESS,
    borderRadius: DIMENSIONS.RADIUS.SMALL,
    paddingHorizontal: DIMENSIONS.SPACING.SMALL,
    paddingVertical: DIMENSIONS.SPACING.TINY,
  },
  activeBadgeText: {
    fontSize: DIMENSIONS.FONT_SIZE.SMALL,
    fontWeight: 'bold',
    color: COLORS.TEXT_INVERSE,
  },
  actionsContainer: {
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  actionButton: {
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  orText: {
    textAlign: 'center',
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.TEXT_SECONDARY,
    marginVertical: DIMENSIONS.SPACING.SMALL,
  },
  errorText: {
    color: COLORS.ERROR,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
    textAlign: 'center',
  },
  infoContainer: {
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  infoTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_4,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  featureRow: {
    flexDirection: 'row',
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  featureIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.PRIMARY_LIGHT,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: DIMENSIONS.SPACING.MEDIUM,
  },
  featureIconText: {
    fontSize: 20,
  },
  featureContent: {
    flex: 1,
  },
  featureTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.TINY,
  },
  featureDescription: {
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.TEXT_SECONDARY,
  },
  termsText: {
    fontSize: DIMENSIONS.FONT_SIZE.SMALL,
    color: COLORS.TEXT_TERTIARY,
    textAlign: 'center',
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
});

export default SubscriptionScreen;
