import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Image } from 'react-native';
import { COLORS } from '../../constants/colors';
import { DIMENSIONS } from '../../constants/dimensions';
import { useExpenses } from '../../context/ExpenseContext';
import { useSubscription } from '../../context/SubscriptionContext';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';

const RecommendationsScreen = ({ navigation }) => {
  const { expenses, categories, getExpensesByPeriod, getTotalByPeriod } = useExpenses();
  const { isPremium } = useSubscription();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∏–Ω—Å–∞–π—Ç–æ–≤
  const [recommendations, setRecommendations] = useState([]);
  const [insights, setInsights] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    generateRecommendations();
  }, [expenses]);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
  const generateRecommendations = () => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const endDate = new Date();
      const startDate = new Date();
      startDate.setMonth(endDate.getMonth() - 3);
      
      const periodExpenses = getExpensesByPeriod(startDate, endDate);
      
      // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (periodExpenses.length < 5) {
        setRecommendations(getDefaultRecommendations());
        setInsights([]);
        return;
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryTotals = {};
      const monthlyTotals = {};
      
      periodExpenses.forEach(expense => {
        const categoryId = expense.category_id || 'other';
        if (!categoryTotals[categoryId]) {
          categoryTotals[categoryId] = 0;
        }
        categoryTotals[categoryId] += parseFloat(expense.amount);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        const expenseDate = new Date(expense.date);
        const monthKey = `${expenseDate.getFullYear()}-${expenseDate.getMonth() + 1}`;
        
        if (!monthlyTotals[monthKey]) {
          monthlyTotals[monthKey] = 0;
        }
        monthlyTotals[monthKey] += parseFloat(expense.amount);
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
      let maxCategory = null;
      let maxAmount = 0;
      
      Object.keys(categoryTotals).forEach(categoryId => {
        if (categoryTotals[categoryId] > maxAmount) {
          maxAmount = categoryTotals[categoryId];
          maxCategory = categoryId;
        }
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤
      const monthKeys = Object.keys(monthlyTotals).sort();
      let growthCategory = null;
      let maxGrowth = 0;
      
      if (monthKeys.length >= 2) {
        const lastMonth = monthKeys[monthKeys.length - 1];
        const prevMonth = monthKeys[monthKeys.length - 2];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const lastMonthExpenses = getExpensesByPeriod(
          new Date(lastMonth + '-01'),
          new Date(new Date(lastMonth + '-01').setMonth(new Date(lastMonth + '-01').getMonth() + 1))
        );
        
        const prevMonthExpenses = getExpensesByPeriod(
          new Date(prevMonth + '-01'),
          new Date(new Date(prevMonth + '-01').setMonth(new Date(prevMonth + '-01').getMonth() + 1))
        );
        
        const lastMonthByCategory = {};
        const prevMonthByCategory = {};
        
        lastMonthExpenses.forEach(expense => {
          const categoryId = expense.category_id || 'other';
          if (!lastMonthByCategory[categoryId]) {
            lastMonthByCategory[categoryId] = 0;
          }
          lastMonthByCategory[categoryId] += parseFloat(expense.amount);
        });
        
        prevMonthExpenses.forEach(expense => {
          const categoryId = expense.category_id || 'other';
          if (!prevMonthByCategory[categoryId]) {
            prevMonthByCategory[categoryId] = 0;
          }
          prevMonthByCategory[categoryId] += parseFloat(expense.amount);
        });
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Object.keys(lastMonthByCategory).forEach(categoryId => {
          const lastAmount = lastMonthByCategory[categoryId] || 0;
          const prevAmount = prevMonthByCategory[categoryId] || 0;
          
          if (prevAmount > 0) {
            const growth = (lastAmount - prevAmount) / prevAmount;
            
            if (growth > maxGrowth && lastAmount > 1000) {
              maxGrowth = growth;
              growthCategory = categoryId;
            }
          }
        });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const personalizedRecommendations = [];
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
      if (maxCategory) {
        const category = categories.find(c => c.id === maxCategory) || { name: '–î—Ä—É–≥–æ–µ' };
        
        personalizedRecommendations.push({
          id: 'high_spending',
          title: `–í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ ${category.name.toLowerCase()}`,
          description: `–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ ${formatAmount(maxAmount)} –Ω–∞ ${category.name.toLowerCase()}. –≠—Ç–æ –≤–∞—à–∞ —Å–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.`,
          action: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.',
          icon: 'üí∞',
          type: 'warning'
        });
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º
      if (growthCategory && maxGrowth > 0.2) { // –†–æ—Å—Ç –±–æ–ª–µ–µ 20%
        const category = categories.find(c => c.id === growthCategory) || { name: '–î—Ä—É–≥–æ–µ' };
        
        personalizedRecommendations.push({
          id: 'growing_expenses',
          title: `–†–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ ${category.name.toLowerCase()}`,
          description: `–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ ${category.name.toLowerCase()} –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ ${Math.round(maxGrowth * 100)}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º.`,
          action: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–æ—Å—Ç–∞ –∏ –ø–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã.',
          icon: 'üìà',
          type: 'warning'
        });
      }
      
      // –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
      const regularExpenses = findRegularExpenses(periodExpenses);
      if (regularExpenses.length > 0) {
        const totalRegular = regularExpenses.reduce((sum, expense) => sum + expense.amount, 0);
        
        personalizedRecommendations.push({
          id: 'regular_expenses',
          title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
          description: `–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å—É–º–º—É –æ–∫–æ–ª–æ ${formatAmount(totalRegular)} –≤ –º–µ—Å—è—Ü.`,
          action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã.',
          icon: 'üîÑ',
          type: 'info'
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const defaultRecs = getDefaultRecommendations();
      const combinedRecommendations = [...personalizedRecommendations];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      if (combinedRecommendations.length < 3) {
        for (let i = 0; i < defaultRecs.length && combinedRecommendations.length < 4; i++) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—â–µ –Ω–µ—Ç
          if (!combinedRecommendations.some(r => r.id === defaultRecs[i].id)) {
            combinedRecommendations.push(defaultRecs[i]);
          }
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
      const generatedInsights = generateInsights(periodExpenses, monthlyTotals);
      
      setRecommendations(combinedRecommendations);
      setInsights(generatedInsights);
    } catch (err) {
      console.error('Error generating recommendations:', err);
      setRecommendations(getDefaultRecommendations());
      setInsights([]);
    } finally {
      setLoading(false);
    }
  };
  
  // –ü–æ–∏—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–æ–¥–ø–∏—Å–∫–∏, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏)
  const findRegularExpenses = (expenses) => {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Å—É–º–º–µ
    const expenseGroups = {};
    
    expenses.forEach(expense => {
      const key = `${expense.description}_${expense.amount}`;
      if (!expenseGroups[key]) {
        expenseGroups[key] = [];
      }
      expenseGroups[key].push(expense);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–∞)
    const regularExpenses = [];
    
    Object.keys(expenseGroups).forEach(key => {
      const group = expenseGroups[key];
      if (group.length >= 2) {
        regularExpenses.push({
          description: group[0].description,
          amount: parseFloat(group[0].amount),
          count: group.length
        });
      }
    });
    
    return regularExpenses;
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
  const generateInsights = (expenses, monthlyTotals) => {
    const insights = [];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∏–Ω–∏–º—É–º –∑–∞ 2 –º–µ—Å—è—Ü–∞
    const monthKeys = Object.keys(monthlyTotals).sort();
    
    if (monthKeys.length >= 2) {
      const lastMonth = monthKeys[monthKeys.length - 1];
      const prevMonth = monthKeys[monthKeys.length - 2];
      
      const lastMonthTotal = monthlyTotals[lastMonth];
      const prevMonthTotal = monthlyTotals[prevMonth];
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
      const diff = lastMonthTotal - prevMonthTotal;
      const percentDiff = (diff / prevMonthTotal) * 100;
      
      if (Math.abs(percentDiff) >= 5) { // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ 5%
        insights.push({
          id: 'month_comparison',
          title: diff > 0 ? '–†–∞—Å—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏' : '–†–∞—Å—Ö–æ–¥—ã —Å–Ω–∏–∑–∏–ª–∏—Å—å',
          description: diff > 0 
            ? `–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ ${formatAmount(Math.abs(diff))} –±–æ–ª—å—à–µ, —á–µ–º –≤ –ø—Ä–æ—à–ª–æ–º (${Math.abs(Math.round(percentDiff))}%).`
            : `–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ ${formatAmount(Math.abs(diff))} –º–µ–Ω—å—à–µ, —á–µ–º –≤ –ø—Ä–æ—à–ª–æ–º (${Math.abs(Math.round(percentDiff))}%).`,
          icon: diff > 0 ? 'üìà' : 'üìâ',
          type: diff > 0 ? 'warning' : 'success'
        });
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    const dayOfWeekTotals = [0, 0, 0, 0, 0, 0, 0]; // –í—Å, –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±
    let totalAmount = 0;
    
    expenses.forEach(expense => {
      const expenseDate = new Date(expense.date);
      const dayOfWeek = expenseDate.getDay();
      dayOfWeekTotals[dayOfWeek] += parseFloat(expense.amount);
      totalAmount += parseFloat(expense.amount);
    });
    
    if (totalAmount > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
      let maxDay = 0;
      let maxDayAmount = 0;
      
      dayOfWeekTotals.forEach((amount, day) => {
        if (amount > maxDayAmount) {
          maxDayAmount = amount;
          maxDay = day;
        }
      });
      
      const dayNames = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'];
      const percentOfTotal = (maxDayAmount / totalAmount) * 100;
      
      if (percentOfTotal >= 20) { // –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –º–∏–Ω–∏–º—É–º 20% —Ä–∞—Å—Ö–æ–¥–æ–≤
        insights.push({
          id: 'day_of_week',
          title: '–î–µ–Ω—å –Ω–∞–∏–±–æ–ª—å—à–∏—Ö —Ç—Ä–∞—Ç',
          description: `–í—ã —Ç—Ä–∞—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ ${dayNames[maxDay]} ‚Äî ${formatAmount(maxDayAmount)} (${Math.round(percentOfTotal)}% –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã).`,
          icon: 'üìÜ',
          type: 'info'
        });
      }
    }
    
    return insights;
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const getDefaultRecommendations = () => {
    return [
      {
        id: 'budget_planning',
        title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
        description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.',
        action: '–°–æ–∑–¥–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.',
        icon: 'üìä',
        type: 'info'
      },
      {
        id: 'expense_tracking',
        title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤',
        description: '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.',
        action: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.',
        icon: 'üé§',
        type: 'info'
      },
      {
        id: 'savings',
        title: '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è',
        description: '–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.',
        action: '–ù–∞—á–Ω–∏—Ç–µ —Å 10% –æ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.',
        icon: 'üí∞',
        type: 'info'
      },
      {
        id: 'review',
        title: '–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        description: '–†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã –≤—ã—è–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.',
        action: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.',
        icon: 'üìà',
        type: 'info'
      }
    ];
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç—ã
  const formatAmount = (amount, currency = '‚ÇΩ') => {
    return `${parseFloat(amount).toLocaleString('ru-RU', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    })} ${currency}`;
  };
  
  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const renderRecommendationCard = (item) => (
    <Card 
      key={item.id} 
      style={[
        styles.recommendationCard, 
        item.type === 'warning' && styles.warningCard,
        item.type === 'success' && styles.successCard
      ]}
    >
      <View style={styles.recommendationHeader}>
        <View style={styles.iconContainer}>
          <Text style={styles.iconText}>{item.icon}</Text>
        </View>
        <Text style={styles.recommendationTitle}>{item.title}</Text>
      </View>
      <Text style={styles.recommendationDescription}>{item.description}</Text>
      {item.action && (
        <Text style={styles.recommendationAction}>üí° {item.action}</Text>
      )}
    </Card>
  );
  
  // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω—Å–∞–π—Ç–∞
  const renderInsightCard = (item) => (
    <Card 
      key={item.id} 
      style={[
        styles.insightCard, 
        item.type === 'warning' && styles.warningCard,
        item.type === 'success' && styles.successCard
      ]}
    >
      <View style={styles.insightHeader}>
        <Text style={styles.insightIcon}>{item.icon}</Text>
        <Text style={styles.insightTitle}>{item.title}</Text>
      </View>
      <Text style={styles.insightDescription}>{item.description}</Text>
    </Card>
  );
  
  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
      <View style={styles.header}>
        <Text style={styles.title}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
        <Text style={styles.description}>
          –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        </Text>
      </View>
      
      {/* –ë–ª–æ–∫ —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ */}
      {insights.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–ò–Ω—Å–∞–π—Ç—ã –æ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö</Text>
          {insights.map(renderInsightCard)}
        </View>
      )}
      
      {/* –ë–ª–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</Text>
        {recommendations.map(renderRecommendationCard)}
      </View>
      
      {/* –ü—Ä–µ–º–∏—É–º-–±–ª–æ–∫ */}
      {!isPremium() && (
        <Card style={styles.premiumCard}>
          <Text style={styles.premiumTitle}>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
          <Text style={styles.premiumDescription}>
            –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤,
            –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.
          </Text>
          <Button
            title="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
            onPress={() => navigation.navigate('SubscriptionScreen')}
            style={styles.premiumButton}
          />
        </Card>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND,
  },
  contentContainer: {
    padding: DIMENSIONS.SPACING.LARGE,
  },
  header: {
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  title: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_2,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  description: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    color: COLORS.TEXT_SECONDARY,
  },
  section: {
    marginBottom: DIMENSIONS.SPACING.LARGE,
  },
  sectionTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_4,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  recommendationCard: {
    padding: DIMENSIONS.SPACING.LARGE,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  warningCard: {
    borderLeftWidth: 4,
    borderLeftColor: COLORS.WARNING,
  },
  successCard: {
    borderLeftWidth: 4,
    borderLeftColor: COLORS.SUCCESS,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.PRIMARY_LIGHT,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: DIMENSIONS.SPACING.MEDIUM,
  },
  iconText: {
    fontSize: 20,
  },
  recommendationTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_4,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
    flex: 1,
  },
  recommendationDescription: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    color: COLORS.TEXT_SECONDARY,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  recommendationAction: {
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.PRIMARY,
    fontWeight: '500',
  },
  insightCard: {
    padding: DIMENSIONS.SPACING.MEDIUM,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  insightHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  insightIcon: {
    fontSize: 20,
    marginRight: DIMENSIONS.SPACING.SMALL,
  },
  insightTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.BODY,
    fontWeight: '600',
    color: COLORS.TEXT_PRIMARY,
  },
  insightDescription: {
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.TEXT_SECONDARY,
  },
  premiumCard: {
    padding: DIMENSIONS.SPACING.LARGE,
    marginBottom: DIMENSIONS.SPACING.LARGE,
    backgroundColor: COLORS.PRIMARY_LIGHT,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.PRIMARY,
  },
  premiumTitle: {
    fontSize: DIMENSIONS.FONT_SIZE.HEADING_4,
    fontWeight: 'bold',
    color: COLORS.TEXT_PRIMARY,
    marginBottom: DIMENSIONS.SPACING.SMALL,
  },
  premiumDescription: {
    fontSize: DIMENSIONS.FONT_SIZE.SECONDARY,
    color: COLORS.TEXT_SECONDARY,
    marginBottom: DIMENSIONS.SPACING.MEDIUM,
  },
  premiumButton: {
    marginTop: DIMENSIONS.SPACING.SMALL,
  },
});

export default RecommendationsScreen;
